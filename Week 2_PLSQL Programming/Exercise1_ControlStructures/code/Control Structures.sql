SET SERVEROUTPUT ON;

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE LOANS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE CUSTOMERS CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

CREATE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    CUSTOMER_NAME VARCHAR2(25),
    AGE NUMBER,
    BALANCE NUMBER,
    IS_VIP VARCHAR2(6) DEFAULT 'FALSE'
);

CREATE TABLE LOANS (
    LOAN_ID NUMBER PRIMARY KEY,
    CUSTOMER_ID NUMBER REFERENCES CUSTOMERS(CUSTOMER_ID),
    INTEREST_RATE NUMBER(5, 2),
    DUE_DATE DATE,
    AMOUNT NUMBER(10, 2)
);

INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, AGE, BALANCE, IS_VIP) VALUES (1, 'Avilash', 65, 8000, 'FALSE');
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, AGE, BALANCE, IS_VIP) VALUES (2, 'Kanistha', 55, 12000, 'FALSE');
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, AGE, BALANCE, IS_VIP) VALUES (3, 'Sudipta', 70, 5000, 'FALSE');
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, AGE, BALANCE, IS_VIP) VALUES (4, 'Sirshanya', 40, 15000, 'FALSE');
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, AGE, BALANCE, IS_VIP) VALUES (5, 'Subhasis', 62, 9000, 'FALSE');
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, AGE, BALANCE, IS_VIP) VALUES (6, 'Bandan', 30, 7000, 'FALSE');

INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, INTEREST_RATE, DUE_DATE, AMOUNT) VALUES (101, 1, 5.50, TO_DATE('2025-07-15', 'YYYY-MM-DD'), 25000);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, INTEREST_RATE, DUE_DATE, AMOUNT) VALUES (102, 2, 6.00, TO_DATE('2025-08-01', 'YYYY-MM-DD'), 50000);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, INTEREST_RATE, DUE_DATE, AMOUNT) VALUES (103, 3, 7.80, TO_DATE('2025-07-05', 'YYYY-MM-DD'), 10000);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, INTEREST_RATE, DUE_DATE, AMOUNT) VALUES (104, 4, 7.20, TO_DATE('2025-09-20', 'YYYY-MM-DD'), 30000);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, INTEREST_RATE, DUE_DATE, AMOUNT) VALUES (105, 5, 6.00, TO_DATE('2025-07-25', 'YYYY-MM-DD'), 15000);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, INTEREST_RATE, DUE_DATE, AMOUNT) VALUES (106, 6, 5.80, TO_DATE('2025-08-10', 'YYYY-MM-DD'), 8000);
COMMIT;

SELECT * FROM CUSTOMERS;
SELECT * FROM LOANS;
DECLARE
    DISCOUNT_PERCENTAGE CONSTANT NUMBER := 0.01;
BEGIN
    DBMS_OUTPUT.PUT_LINE(CHR(10) || '  Scenario 1: Applying Loan Interest Rate Discount  ');
    FOR cust_rec IN (SELECT CUSTOMER_ID, CUSTOMER_NAME, AGE FROM CUSTOMERS) LOOP
        IF cust_rec.AGE > 60 THEN
            UPDATE LOANS
            SET INTEREST_RATE = INTEREST_RATE - (INTEREST_RATE * DISCOUNT_PERCENTAGE)
            WHERE CUSTOMER_ID = cust_rec.CUSTOMER_ID;
            DBMS_OUTPUT.PUT_LINE('Applied ' || (DISCOUNT_PERCENTAGE * 100) || '% discount for Customer: ' || cust_rec.CUSTOMER_NAME || ' (ID: ' || cust_rec.CUSTOMER_ID || ', Age: ' || cust_rec.AGE || ')');
        END IF;
    END LOOP;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Loan interest rate discount process completed and changes committed.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred in Scenario 1: ' || SQLERRM);
        ROLLBACK;
END;
/

DECLARE
    VIP_THRESHOLD CONSTANT NUMBER := 10000;
BEGIN
    DBMS_OUTPUT.PUT_LINE(CHR(10) || '  Scenario 2: Promoting Customers to VIP Status  ');
    FOR cust_rec IN (SELECT CUSTOMER_ID, CUSTOMER_NAME, BALANCE FROM CUSTOMERS) LOOP
        IF cust_rec.BALANCE > VIP_THRESHOLD THEN
            UPDATE CUSTOMERS
            SET IS_VIP = 'TRUE'
            WHERE CUSTOMER_ID = cust_rec.CUSTOMER_ID;
            DBMS_OUTPUT.PUT_LINE('Customer ' || cust_rec.CUSTOMER_NAME || ' (ID: ' || cust_rec.CUSTOMER_ID || ') promoted to VIP with Balance: $' || cust_rec.BALANCE);
        END IF;
    END LOOP;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('VIP status promotion process completed and changes committed.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred in Scenario 2: ' || SQLERRM);
        ROLLBACK;
END;
/

DECLARE
BEGIN
    DBMS_OUTPUT.PUT_LINE(CHR(10) || '--- Scenario 3: Sending Loan Due Reminders ---');
    FOR loan_rec IN (
        SELECT
            c.CUSTOMER_NAME,
            c.CUSTOMER_ID,
            l.LOAN_ID,
            l.DUE_DATE,
            l.AMOUNT
        FROM
            LOANS l
        JOIN
            CUSTOMERS c ON l.CUSTOMER_ID = c.CUSTOMER_ID
        WHERE
            l.DUE_DATE BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE) + 30
        ORDER BY
            l.DUE_DATE ASC
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(loan_rec.CUSTOMER_NAME || ' (ID: ' || loan_rec.CUSTOMER_ID || '), loan (ID: ' || loan_rec.LOAN_ID || ') of $' || loan_rec.AMOUNT || ' is due on ' || TO_CHAR(loan_rec.DUE_DATE, 'YYYY-MM-DD') || '.');
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Loan reminder process completed.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred in Scenario 3: ' || SQLERRM);
END;
/